AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  Nonce:
    Type: String
    Description: Random value used to trigger edge lambda update.

  WebsiteRoute53HostedZoneName:
    Type: String
    Description: The DNS name of an existing Amazon Route 53 hosted zone e.g. jamesmoriarty.xyz
    AllowedPattern: (?!-)[a-zA-Z0-9-.]{1,63}(?<!-)
    ConstraintDescription: must be a valid DNS zone name.

  WebsiteRoute53DomainName:
    Type: String
    Description: The full domain name e.g. www.jamesmoriarty.xyz
    AllowedPattern: (?!-)[a-zA-Z0-9-.]{1,63}(?<!-)
    ConstraintDescription: must be a valid DNS zone name.

  WebsiteCloudfrontDistributionAcmCertificateArn:
    Type: String
    Description: the Amazon Resource Name (ARN) of an AWS Certificate Manager (ACM) certificate.
    AllowedPattern: 'arn:aws:acm:.*'

  EdgeLambdaCode:
    Type: String
    Default: |
          exports.handler = (event, ctx, cb) => {
            clientRequest = event.Records[0].cf.request

            if (clientRequest.querystring.split(/\&/).includes('debug')) {
              const status = '200'
              const headers = {
                'content-type': [{
                  key: 'Content-Type',
                  value: 'application/json'
                }]
              }
              const body = JSON.stringify(event, null, 2)
              const response = {status, headers, body}
              cb(null, response)
            } else {
              cb(null, clientRequest)
            }
          }

Outputs:
  WebsiteS3BucketName:
    Value: !Ref WebsiteS3Bucket
    
  WebsiteCloudfrontDistribution:
    Value: !Ref WebsiteCloudfrontDistribution

  WebsiteCloudfrontDistributionDomainName:
    Value: !GetAtt [WebsiteCloudfrontDistribution, DomainName]

  WebsiteDomainName:
    Value: !Ref WebsiteRoute53DomainName

Mappings:
  RegionMap:
    us-east-1:
      S3HostedZoneId: Z3AQBSTGFYJSTF
    us-west-1:
      S3HostedZoneId: Z2F56UZL2M1ACD
    us-west-2:
      S3HostedZoneId: Z3BJ6K6RIION7M
    eu-west-1:
      S3HostedZoneId: Z1BKCTXD74EZPE
    ap-southeast-1:
      S3HostedZoneId: Z3O0J2DXBE1FTB
    ap-southeast-2:
      S3HostedZoneId: Z1WCIGYICN2BYD
    ap-northeast-1:
      S3HostedZoneId: Z2M4EHUR26P7ZW
    sa-east-1:
      S3HostedZoneId: Z31GFT0UA1I2HV

Resources:
  WebsiteS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Join ['', [!Ref 'AWS::AccountId', '-', !Ref 'AWS::Region', '-', !Ref 'AWS::StackName']]
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: 404.html
    # DeletionPolicy: Retain

  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref WebsiteS3Bucket
      PolicyDocument:
        Statement:
        - Sid: PublicReadForGetBucketObjects
          Effect: Allow
          Principal: '*'
          Action: s3:GetObject
          Resource: !Join ['', ['arn:aws:s3:::', !Ref WebsiteS3Bucket, /*]]

  WebsiteCloudfrontDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn:
    - WebsiteS3Bucket
    Properties:
      DistributionConfig:
        Origins:
        - DomainName: !Select [2, !Split ['/', !GetAtt WebsiteS3Bucket.WebsiteURL]]
          Id: S3Origin
          CustomOriginConfig:
            HTTPPort: 80
            HTTPSPort: 443
            OriginProtocolPolicy: http-only
        Enabled: true
        HttpVersion: http2
        DefaultRootObject: index.html
        Aliases:
        - !Ref WebsiteRoute53DomainName
        DefaultCacheBehavior:
          AllowedMethods:
          - GET
          - HEAD
          Compress: true
          TargetOriginId: S3Origin
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
          LambdaFunctionAssociations:
          - EventType: viewer-request
            LambdaFunctionARN: !GetAtt EdgeLambdaVersion.FunctionArn
        PriceClass: PriceClass_All
        ViewerCertificate:
          AcmCertificateArn: !Ref WebsiteCloudfrontDistributionAcmCertificateArn
          SslSupportMethod: sni-only

  WebsiteRoute53AliasRecord:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Join ['', [!Ref WebsiteRoute53HostedZoneName, .]]
      RecordSets:
      - Name: !Ref WebsiteRoute53DomainName
        Type: A
        AliasTarget:
          HostedZoneId: Z2FDTNDATAQYW2 # Cloudfront HostedZoneId https://docs.aws.amazon.com/general/latest/gr/rande.html
          DNSName: !GetAtt [WebsiteCloudfrontDistribution, DomainName]

  EdgeLambda:
    Type: AWS::Lambda::Function
    Properties:
      Role: !GetAtt EdgeLambdaRole.Arn
      Runtime: nodejs8.10
      Handler: index.handler
      Code:
        ZipFile: !Ref EdgeLambdaCode

  EdgeLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
            - edgelambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole

  EdgeLambdaVersion:
    Type: Custom::LatestLambdaVersion
    Properties:
      ServiceToken: !GetAtt PublishLambdaVersion.Arn
      FunctionName: !Ref EdgeLambda
      Nonce: !Ref Nonce # Custom resource for getting latest version of a lambda, as required by CloudFront. https://stackoverflow.com/questions/41452274/how-to-create-a-new-version-of-a-lambda-function-using-cloudformation

  PublishLambdaVersion:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs8.10
      Role: !GetAtt PublishLambdaVersionRole.Arn
      Code:
        ZipFile: |
          const {Lambda} = require('aws-sdk')
          const {send, SUCCESS, FAILED} = require('cfn-response')
          const lambda = new Lambda()
          exports.handler = (event, context) => {
            const {RequestType, ResourceProperties: {FunctionName}} = event
            if (RequestType == 'Delete') return send(event, context, SUCCESS)
            lambda.publishVersion({FunctionName}, (err, {FunctionArn}) => {
              err
                ? send(event, context, FAILED, err)
                : send(event, context, SUCCESS, {FunctionArn})
            })
          }

  PublishLambdaVersionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: PublishVersion
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action: lambda:PublishVersion
            Resource: '*'
